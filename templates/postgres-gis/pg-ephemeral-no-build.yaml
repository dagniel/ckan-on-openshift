apiVersion: v1
kind: Template
metadata:
  name: ckan-postgres-gis-ephemeral
  annotations:
    description: |-
      Template for deploying the postgres with postgis component for ckan.
      Based on CrunchyData's container image: https://github.com/CrunchyData/crunchy-containers/tree/2.3.1
      Environment is kept in the 2 Secrets defined; to change deployment behaviour, must edit the values there and redeploy

      Template for components without persistent storage(ephemeral)

      The Parameters PG_ROOT_PASSWORD PG_PRIMARY_PASSWORD PG_PASSWORD DS_RO_PASS are used for convenience to generate
      values at random at the initial deployment. They are kept in subsequent Openshift objects (Secrets, ConfigMaps)
      and are referenced by different application components. So if they are changed/replaced a manual refactoring should be done.
    iconClass: icon-postgresql
    openshift.io/display-name: Ckan - Postgresql(ephemeral) component
    tags: ckan,postgresql,crunchydata
    template.openshift.io/long-description: >-
      Template for deploying the postgres with postgis component for ckan.
      Based on CrunchyData's container image: https://github.com/CrunchyData/crunchy-containers/tree/2.3.1
      Environment is kept in the 2 Secrets defined; to change deployment behaviour, must edit the values there and redeploy

      Template for components without persistent storage(ephemeral)

      The Parameters PG_ROOT_PASSWORD PG_PRIMARY_PASSWORD PG_PASSWORD DS_RO_PASS are used for convenience to generate
      values at random at the initial deployment. They are kept in subsequent Openshift objects (Secrets, ConfigMaps)
      and are referenced by different application components. So if they are changed/replaced a manual refactoring should be done.
parameters:
  - name: NAME
    displayName: Application name
    description: The name assigned to all of the frontend objects defined in this template.
    value: ckan
    required: true
  - name: NAMESPACE
    displayName: Namespace
    description: The OpenShift Namespace where the resources will be created.
    value: ckan
    required: true
  - name: RUNTIME_IMG_NAME
    displayName: Source ImageStream name
    description: |-
      The existing OpenShift runtime image used to deploy and run the app
      Shold be of the form image:tag
    required: true
    value: "quay.io/dagniel/ckan.postgres-gis-on-openshift:centos7-9.6.12-2.3.1"
  - name: PG_ENV
    displayName: Reference to Secret holding env vars
    required: true
    value: ckan-postgresql-env
  - name: PG_AUTH
    displayName: Reference to Secret holding authentication details
    required: true
    value: ckan-postgresql-auth
  - name: PG_CONF_MAP
    displayName: Reference to ConfigMap holding configuration files for DB init
    required: true
    value: ckan-postgresql
  - name: PG_PRIMARY_PORT
    displayName: Database port
    value: '5432'
  - name: PG_ROOT_PASSWORD
    displayName: Password for user postgres(generated)
    from: '[a-z0-9]{8}'
    generate: expression
    required: true
  - name: PG_PRIMARY_PASSWORD
    displayName: Password for replication user(generated)
    from: '[a-z0-9]{8}'
    generate: expression
    required: true
  - name: PG_PASSWORD
    displayName: Password for datastore primary user
    from: '[a-z0-9]{8}'
    generate: expression
    required: true
  - name: DS_RO_PASS
    displayName: Password for datastore read-only user
    from: '[a-z0-9]{8}'
    generate: expression
    required: true
  - name: ENV_TZ
    displayName: Environment for timezone
    description: -|
      OShift environment variable inserted in Pod to set the environment variable for the timezone used by the base container.
      Useful for logging
    value: "Europe/Amsterdam"
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${NAME}-postgresql
    namespace: ${NAMESPACE}
    labels:
      app: ${NAME}
      ckan.component: postgresql
  data:
#    pg_hba.conf: |
#      host all  all    0.0.0.0/0  md5
    setup.sql: |-
      SET application_name="container_setup";

      create extension postgis;
      create extension postgis_topology;
      create extension fuzzystrmatch;
      create extension postgis_tiger_geocoder;
      create extension pg_stat_statements;
      create extension pgaudit;
      create extension plr;

      alter user postgres password 'PG_ROOT_PASSWORD';

      create user PG_PRIMARY_USER with REPLICATION  PASSWORD 'PG_PRIMARY_PASSWORD';
      create user PG_USER with password 'PG_PASSWORD';

      create table primarytable (key varchar(20), value varchar(20));
      grant all on primarytable to PG_PRIMARY_USER;

      create database PG_DATABASE;

      grant all privileges on database PG_DATABASE to PG_USER;

      CREATE ROLE PG_DATASTORE_RO_USER NOSUPERUSER NOCREATEDB NOCREATEROLE LOGIN PASSWORD 'PG_DATASTORE_RO_PASS';
      CREATE DATABASE PG_DATASTORE_DB OWNER PG_USER ENCODING 'utf-8';
      GRANT ALL PRIVILEGES ON DATABASE PG_DATASTORE_DB TO PG_USER;

      \c PG_DATABASE

      create extension postgis;
      create extension postgis_topology;
      create extension fuzzystrmatch;
      create extension postgis_tiger_geocoder;
      create extension pg_stat_statements;
      create extension pgaudit;
      create extension plr;

      \c PG_DATABASE PG_USER;
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: ${NAME}
      ckan.component: postgresql
    name: ${NAME}-postgresql-env
    namespace: ${NAMESPACE}
  stringData:
    PG_PRIMARY_PORT: '${PG_PRIMARY_PORT}'
    PGHOST: '/tmp'
    PG_MODE: primary
    PG_DATABASE: ckan
    PG_DATASTORE_DB: datastore
    PG_LOCALE: en_US.utf8
  type: Opaque
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: ${NAME}
      ckan.component: postgresql
    name: ${NAME}-postgresql-auth
    namespace: ${NAMESPACE}
  stringData:
    PG_PRIMARY_USER: replicator
    PG_PRIMARY_PASSWORD: ${PG_PRIMARY_PASSWORD}
    PG_USER: ckan
    PG_PASSWORD: ${PG_PASSWORD}
    PG_ROOT_PASSWORD: ${PG_ROOT_PASSWORD}
    PG_DATASTORE_RO_USER: datastore_ro
    PG_DATASTORE_RO_PASS: ${DS_RO_PASS}
  type: Opaque
- kind: Service
  apiVersion: v1
  metadata:
    name: ${NAME}-postgresql
    labels:
      app: ${NAME}
      ckan.component: postgresql
  spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: ${{PG_PRIMARY_PORT}}
    selector:
      deploymentconfig: ${NAME}-postgresql
    type: ClusterIP
    sessionAffinity: None
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
      ckan.component: postgresql
    name: ${NAME}-postgresql
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    revisionHistoryLimit: 5
    selector:
      app: ${NAME}
    template:
      metadata:
        labels:
          app: ${NAME}
          ckan.component: postgresql
          deploymentconfig: ${NAME}-postgresql
      spec:
        containers:
        - name: ${NAME}-postgresql
          image: "${RUNTIME_IMG_NAME}"
          readinessProbe:
            exec:
              command:
              - "/opt/cpm/bin/readiness.sh"
            initialDelaySeconds: 40
            timeoutSeconds: 10
          livenessProbe:
            exec:
              command:
              - "/opt/cpm/bin/liveness.sh"
            initialDelaySeconds: 40
            timeoutSeconds: 10
          ports:
          - containerPort: ${{PG_PRIMARY_PORT}}
            protocol: TCP
          env:
            - name: TZ
              value: ${ENV_TZ}
            - name: PG_PRIMARY_USER
              valueFrom:
                secretKeyRef:
                  key: PG_PRIMARY_USER
                  name: ${PG_AUTH}
            - name: PG_PRIMARY_PORT
              valueFrom:
                secretKeyRef:
                  key: PG_PRIMARY_PORT
                  name: ${PG_ENV}
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  key: PGHOST
                  name: ${PG_ENV}
            - name: PG_MODE
              valueFrom:
                secretKeyRef:
                  key: PG_MODE
                  name: ${PG_ENV}
            - name: PG_PRIMARY_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PRIMARY_PASSWORD
                  name: ${PG_AUTH}
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  key: PG_USER
                  name: ${PG_AUTH}
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PASSWORD
                  name: ${PG_AUTH}
            - name: PG_DATABASE
              valueFrom:
                secretKeyRef:
                  key: PG_DATABASE
                  name: ${PG_ENV}
            - name: PG_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_ROOT_PASSWORD
                  name: ${PG_AUTH}
            - name: PG_DATASTORE_DB
              valueFrom:
                secretKeyRef:
                  key: PG_DATASTORE_DB
                  name: ${PG_ENV}
            - name: PG_LOCALE
              valueFrom:
                secretKeyRef:
                  key: PG_LOCALE
                  name: ${PG_ENV}
            - name: PG_DATASTORE_RO_USER
              valueFrom:
                secretKeyRef:
                  key: PG_DATASTORE_RO_USER
                  name: ${PG_AUTH}
            - name: PG_DATASTORE_RO_PASS
              valueFrom:
                secretKeyRef:
                  key: PG_DATASTORE_RO_PASS
                  name: ${PG_AUTH}
          volumeMounts:
            - mountPath: "/pgdata"
              name: pgdata
              readOnly: false
            - mountPath: "/pgconf"
              name: pgconf
              readOnly: true
        volumes:
        - name: pgdata
          emptyDir: {}
        - name: pgconf
          configMap:
            name: ${PG_CONF_MAP}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        automountServiceAccountToken: false
    triggers:
    - type: ConfigChange
    strategy:
      type: Recreate
      resources: {}
